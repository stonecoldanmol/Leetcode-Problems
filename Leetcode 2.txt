/*
2. Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2)
{
    struct ListNode* l3=NULL,*p1=l1,*p2=l2,*p3=l3,*p3_prev=NULL;
    int carry=0;
    int turn=0;
    
    while(p1||p2||carry)
    {
        int val1=0,val2=0,val3=0;
        if(p1)
        {
            val1=p1->val;
            p1=p1->next;
        }
        if(p2)
        {
            val2=p2->val;
            p2=p2->next;
        }
        val3=val1+val2+carry;
        carry=val3/10;
        p3=(struct Listnode*)malloc(sizeof(struct ListNode));
        p3->val=val3%10;
        p3->next=NULL;
        
        if(!turn)
            l3=p3;
        else
            p3_prev->next=p3;
        p3_prev=p3;
        turn++;
        
    }
    
    
    return l3;
    
    
}

